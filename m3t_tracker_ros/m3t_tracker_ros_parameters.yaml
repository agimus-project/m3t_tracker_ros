m3t_tracker_ros:
  dataset_path: {
    type: string,
    description: "Global path to the precomputed dataset of object modalities.",
    validation: {
      not_empty<>: [],
      "custom_validators::check_object_model_path": null
    },
  }

  use_depth: {
    type: bool,
    default_value: false,
    description: "Whether to expect depth images to be published.",
  }

  time_sync_slop: {
    type: double,
    default_value: 0.05,
    description: "Delay [seconds] with which incoming messages can be synchronized.",
  }

  depth_scale: {
    type: double,
    default_value: 0.001,
    description: "@mfoumy plz help.",
    validation: {
      gt<>: 0.0,
    }
  }

  geometry_unit_in_meter: {
    type: double,
    default_value: 0.001,
    description: "@mfoumy plz help.",
    validation: {
      gt<>: 0.0,
    }
  }

  n_corr_iterations: {
    type: int,
    default_value: 4,
    description: "@mfoumy plz help.",
    validation: {
      gt_eq<>: 1,
    }
  }

  n_update_iterations: {
    type: int,
    default_value: 2,
    description: "@mfoumy plz help.",
    validation: {
      gt_eq<>: 1,
    }
  }

  tikhonov_parameter_rotation: {
    type: double,
    default_value: 1000.0,
    description: "@mfoumy plz help.",
    validation: {
      # @mfoumy should it be 0.0?
      gt<>: 0.0,
    }
  }

  tikhonov_parameter_translation: {
    type: double,
    default_value: 30000.0,
    description: "@mfoumy plz help.",
    validation: {
      # @mfoumy should it be 0.0?
      gt<>: 0.0,
    }
  }

  models: {
    type: string_array,
    default_value: ["region_model", "depth_model"],
    description: "Walk-around to create two namespaces with the same set of parameters.",
    validation: {
      fixed_size<>: 2,
      subset_of<>: [["region_model", "depth_model"]],
      unique<>: []
    },
    read_only: true,
  }
  __map_models: {
    sphere_radius: {
      type: double,
      default_value: 0.8,
      description: "@mfoumy plz help.",
      validation: {
        gt<>: 0.0,
      }
    },
    n_divides: {
      type: int,
      default_value: 4,
      description: "@mfoumy plz help.",
      validation: {
        gt_eq<>: 1,
      },
    },
    n_points_max: {
      type: int,
      default_value: 200,
      description: "@mfoumy plz help.",
      validation: {
        gt_eq<>: 1,
      },
    },
    max_radius_depth_offset: {
      type: double,
      default_value: 0.05,
      description: "@mfoumy plz help.",
      validation: {
        gt<>: 0.0,
      }
    },
    stride_depth_offset: {
      type: double,
      default_value: 0.002,
      description: "@mfoumy plz help.",
      validation: {
        # @mfoumy should it be 0.0?
        gt<>: 0.0,
      }
    },
    use_random_seed: {
      type: bool,
      default_value: false,
      description: "@mfoumy plz help.",
    },
    image_size: {
      type: int,
      default_value: 2000,
      description: "@mfoumy plz help.",
      validation: {
        gt_eq<>: 1,
      },
    },
  }

  tracked_objects: {
    type: string_array,
    default_value: [""],
    description: "IDs of the objects found in the precomputed modalities folder used to track them.",
    read_only: true,
  }

  __map_tracked_objects: {
    region_modality: {
      n_lines_max: {
        type: int,
        default_value: 200,
        description: "@mfoumy plz help.",
        validation: {
          gt_eq<>: 1,
        },
      },
      use_adaptive_coverage: {
        type: bool,
        default_value: false,
        description: "@mfoumy plz help.",
      },
      max_radius_depth_offset: {
        type: double,
        default_value: 0.0,
        description: "@mfoumy plz help.",
        validation: {
          # @mfoumy should it be 0.0?
          gt_eq<>: 0.0,
        }
      },
      min_continuous_distance: {
        type: double,
        default_value: 3.0,
        description: "@mfoumy plz help.",
        validation: {
          gt_eq<>: 0.0,
        }
      },
      function_length: {
        type: int,
        default_value: 8,
        description: "@mfoumy plz help.",
        validation: {
          gt_eq<>: 1,
        },
      },
      distribution_length: {
        type: int,
        default_value: 12,
        description: "@mfoumy plz help.",
        validation: {
          # @mfoumy should it be 1?
          gt_eq<>: 1,
        },
      },
      function_amplitude: {
        type: double,
        default_value: 0.43,
        description: "@mfoumy plz help.",
        validation: {
          gt<>: 0.0,
        }
      },
      function_slope: {
        type: double,
        default_value: 0.5,
        description: "@mfoumy plz help.",
        validation: {
          # @mfoumy should it be 0.0?
          gt<>: 0.0,
        }
      },
      learning_rate: {
        type: double,
        default_value: 1.3,
        description: "@mfoumy plz help.",
        validation: {
          gt<>: 0.0,
        }
      },
      n_global_iterations: {
        type: int,
        default_value: 1,
        description: "@mfoumy plz help.",
        validation: {
          # @mfoumy should it be 1?
          gt_eq<>: 1,
        }
      },
      scales: {
        type: double_array,
        # @mfoumy does it have a fixed size and value constraints?
        default_value: [6.0, 4.0, 2.0, 1.0],
        description: "@mfoumy plz help.",
        validation: {
          not_empty<>: [],
        }
      },
      standard_deviations: {
        type: double_array,
        # @mfoumy does it have a fixed size and value constraints?
        default_value: [15.0, 5.0, 3.5, 1.5],
        description: "@mfoumy plz help.",
        validation: {
          not_empty<>: [],
        }
      },
      histogram: {
        n_bins: {
          type: int,
          default_value: 16,
          description: "@mfoumy plz help.",
          validation: {
            gt_eq<>: 1,
          }
        },
        learning_rate_f: {
          type: double,
          default_value: 0.2,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        learning_rate_b: {
          type: double,
          default_value: 0.2,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        unconsidered_line_length: {
          type: double,
          default_value: 0.5,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        max_considered_line_length: {
          type: double,
          default_value: 20.0,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
      },
      occlusion: {
        n_unoccluded_iterations: {
          type: int,
          default_value: 10,
          description: "@mfoumy plz help.",
          validation: {
            # @mfoumy should it be 1?
            gt_eq<>: 1,
          }
        },
        min_n_unoccluded_lines: {
          type: int,
          default_value: 0,
          description: "@mfoumy plz help.",
          validation: {
            gt_eq<>: 0,
          }
        },
        measure_occlusions: {
          type: bool,
          default_value: false,
          description: "@mfoumy plz help.",
        },
        measured_depth_offset_radius: {
          type: double,
          default_value: 0.01,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        measured_occlusion_radius: {
          type: double,
          default_value: 0.01,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        measured_occlusion_threshold: {
          type: double,
          default_value: 0.03,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        model_occlusions: {
          type: bool,
          default_value: false,
          description: "@mfoumy plz help.",
        },
        modeled_depth_offset_radius: {
          type: double,
          default_value: 0.01,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        modeled_occlusion_radius: {
          type: double,
          default_value: 0.01,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        modeled_occlusion_threshold: {
          type: double,
          default_value: 0.03,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
      }
    },

    depth_modality: {
      n_points_max: {
        type: int,
        default_value: 200,
        description: "@mfoumy plz help.",
        validation: {
          # @mfoumy should it be 0.0?
          gt_eq<>: 1,
        }
      },
      use_adaptive_coverage: {
        type: bool,
        default_value: false,
        description: "@mfoumy plz help.",
      },
      reference_surface_area: {
        type: double,
        default_value: 0.0,
        description: "@mfoumy plz help.",
        validation: {
          gt_eq<>: 0.0,
        }
      },
      stride_length: {
        type: double,
        default_value: 0.005,
        description: "@mfoumy plz help.",
        validation: {
          gt<>: 0.0,
        }
      },
      considered_distances: {
        type: double_array,
        # @mfoumy does it have a fixed size and value constraints?
        default_value: [0.05, 0.02, 0.01],
        description: "@mfoumy plz help.",
        validation: {
          not_empty<>: [],
        }
      },
      standard_deviations: {
        type: double_array,
        # @mfoumy does it have a fixed size and value constraints?
        default_value: [0.05, 0.03, 0.02],
        description: "@mfoumy plz help.",
        validation: {
          not_empty<>: [],
        }
      },
      occlusion: {
        n_unoccluded_iterations: {
          type: int,
          default_value: 10,
          description: "@mfoumy plz help.",
          validation: {
            # @mfoumy should it be 1?
            gt_eq<>: 1,
          }
        },
        min_n_unoccluded_points: {
          type: int,
          default_value: 0,
          description: "@mfoumy plz help.",
          validation: {
            gt_eq<>: 0,
          }
        },
        measure_occlusions: {
          type: bool,
          default_value: false,
          description: "@mfoumy plz help.",
        },
        measured_depth_offset_radius: {
          type: double,
          default_value: 0.01,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        measured_occlusion_radius: {
          type: double,
          default_value: 0.01,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        measured_occlusion_threshold: {
          type: double,
          default_value: 0.03,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        model_occlusions: {
          type: bool,
          default_value: false,
          description: "@mfoumy plz help.",
        },
        modeled_depth_offset_radius: {
          type: double,
          default_value: 0.01,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        modeled_occlusion_radius: {
          type: double,
          default_value: 0.01,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        },
        modeled_occlusion_threshold: {
          type: double,
          default_value: 0.03,
          description: "@mfoumy plz help.",
          validation: {
            gt<>: 0.0,
          }
        }
      }
    }
  }
